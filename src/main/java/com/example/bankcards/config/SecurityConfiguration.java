package com.example.bankcards.config;

import com.example.bankcards.config.properties.AccessTokenProperties;
import com.example.bankcards.security.filter.JwtTokenFilter;
import com.example.bankcards.service.JwtService;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.DelegatingPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfiguration {
    /**
     * Static property for storing BCrypt ID
     */
    private static final String idForEncode = "bcrypt";

    /**
     * Static property for storing key properties of encoders
     */
    private static final Map<String, PasswordEncoder> encoders = new HashMap<>();

    private final AccessTokenProperties accessTokenProperties;

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http, UserDetailsService userDetailsService) throws Exception {
        return http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth ->
                    auth.requestMatchers("/api/auth/**").permitAll()
                    .anyRequest().authenticated()
                )
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .addFilterBefore(jwtTokenFilter(userDetailsService), UsernamePasswordAuthenticationFilter.class)
                .build();
    }

    @Bean
    AuthenticationManager authMgr(PasswordEncoder passwordEncoder, UserDetailsService userDetailsService) {
        final var authProvider = new DaoAuthenticationProvider(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder);

        return new ProviderManager(authProvider);
    }

    @Bean
    @Primary
    PasswordEncoder bcryptPasswordEncoder() {
        encoders.put(idForEncode, new BCryptPasswordEncoder());
        return new DelegatingPasswordEncoder(idForEncode, encoders);
    }

    @Bean("withDefaultMappings")
    PasswordEncoder passwordEncoderWithDefaultMappings() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }

    @Bean
    @Primary
    SecretKey secretKeySpec() {
        return Keys.hmacShaKeyFor(accessTokenProperties.getSecret()
                .getBytes(StandardCharsets.UTF_8));
    }

    @Bean("autoGenerated")
    SecretKey autoGeneratedSecretKey() {
        return Jwts.SIG.HS256.key().build();
    }

    @Bean
    JwtService jwtService() {
        return new JwtService(accessTokenProperties, secretKeySpec());
    }

    @Bean
    JwtTokenFilter jwtTokenFilter(UserDetailsService userDetailsService) {
        return new JwtTokenFilter(jwtService(),  userDetailsService);
    }
}
